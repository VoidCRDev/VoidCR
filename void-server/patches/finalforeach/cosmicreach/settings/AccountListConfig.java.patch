--- /dev/null
+++ b/finalforeach/cosmicreach/settings/AccountListConfig.java
@@ -1,0 +_,164 @@
+package finalforeach.cosmicreach.settings;
+
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.Array.ArrayIterator;
+import finalforeach.cosmicreach.accounts.Account;
+import finalforeach.cosmicreach.io.SaveLocation;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.nio.charset.StandardCharsets;
+
+public class AccountListConfig {
+   Array<AccountListConfig.AccountEntry> accountEntries = new Array();
+   String fileName;
+
+   public AccountListConfig(String fileName) {
+      this.fileName = fileName;
+      this.load();
+   }
+
+   private String getAccountEntryComment(Account account) {
+      return account.getUsername() + " " + account.getDisplayName();
+   }
+
+   public void addAccount(Account account) {
+      synchronized (this.accountEntries) {
+         String accountId = account.getUniqueId();
+         String comment = this.getAccountEntryComment(account);
+         AccountListConfig.AccountEntry previousEntry = this.getAccountEntry(account);
+         if (previousEntry == null || !comment.equals(previousEntry.comment())) {
+            if (previousEntry != null) {
+               this.accountEntries.removeValue(previousEntry, false);
+            }
+
+            this.accountEntries.add(new AccountListConfig.AccountEntry(accountId, comment));
+            this.save();
+         }
+      }
+   }
+
+   public AccountListConfig.AccountEntry getAccountEntry(Account account) {
+      ArrayIterator var2 = this.accountEntries.iterator();
+
+      while (var2.hasNext()) {
+         AccountListConfig.AccountEntry entry = (AccountListConfig.AccountEntry)var2.next();
+         if (entry.accountId().equals(account.getUniqueId())) {
+            return entry;
+         }
+
+         if (entry.accountId().equals(account.getUsername())) {
+            return entry;
+         }
+      }
+
+      return null;
+   }
+
+   public void removeAccount(String accountName) {
+      synchronized (this.accountEntries) {
+         this.accountEntries.removeValue(this.getAccountEntry(accountName), false);
+      }
+   }
+
+   public boolean hasAccount(String accountName) {
+      return this.getAccountEntry(accountName) != null;
+   }
+
+   public AccountListConfig.AccountEntry getAccountEntry(String accountName) {
+      synchronized (this.accountEntries) {
+         ArrayIterator var3 = this.accountEntries.iterator();
+
+         while (var3.hasNext()) {
+            AccountListConfig.AccountEntry entry = (AccountListConfig.AccountEntry)var3.next();
+            if (entry.accountId().equals(accountName)) {
+               return entry;
+            }
+
+            String[] comment = entry.comment().split(" ");
+
+            for (String s : comment) {
+               if (s.equals(accountName)) {
+                  return entry;
+               }
+
+               if (s.contains(":")) {
+                  String[] parts = s.split(":");
+                  if (parts[1].trim().equals(accountName)) {
+                     return entry;
+                  }
+               }
+            }
+         }
+
+         return null;
+      }
+   }
+
+   public void removeAccount(Account account) {
+      synchronized (this.accountEntries) {
+         this.accountEntries.removeValue(this.getAccountEntry(account), false);
+      }
+   }
+
+   public void load() {
+      File f = new File(SaveLocation.getSaveFolderLocation() + "/" + this.fileName);
+      if (!f.exists()) {
+         this.save();
+      } else {
+         try (FileInputStream fis = new FileInputStream(f)) {
+            String wholeFileStr = new String(fis.readAllBytes(), StandardCharsets.UTF_8);
+            String[] lines = wholeFileStr.replaceAll("\r\n", "\n").split("\n");
+
+            for (String line : lines) {
+               line = line.trim();
+               if (!line.isBlank()) {
+                  int commentStartIdx = line.indexOf(35);
+                  if (commentStartIdx == -1) {
+                     this.accountEntries.add(new AccountListConfig.AccountEntry(line, ""));
+                  } else {
+                     String id = line.substring(0, commentStartIdx).trim();
+                     String comment = "";
+                     if (commentStartIdx + 1 < line.length()) {
+                        comment = line.substring(commentStartIdx + 1);
+                     }
+
+                     this.accountEntries.add(new AccountListConfig.AccountEntry(id, comment));
+                  }
+               }
+            }
+         } catch (Exception var14) {
+            var14.printStackTrace();
+         }
+      }
+   }
+
+   public void save() {
+      File f = new File(SaveLocation.getSaveFolderLocation() + "/" + this.fileName);
+      StringBuilder listBuilder = new StringBuilder();
+      ArrayIterator contents = this.accountEntries.iterator();
+
+      while (contents.hasNext()) {
+         AccountListConfig.AccountEntry entry = (AccountListConfig.AccountEntry)contents.next();
+         listBuilder.append(entry.accountId());
+         listBuilder.append(" # ");
+         listBuilder.append(entry.comment());
+         listBuilder.append("\r\n");
+      }
+
+      byte[] contentsx = listBuilder.toString().getBytes(StandardCharsets.UTF_8);
+
+      try (FileOutputStream fos = new FileOutputStream(f)) {
+         fos.write(contentsx);
+      } catch (Exception var9) {
+         var9.printStackTrace();
+      }
+   }
+
+   public boolean hasAccount(Account account) {
+      return this.getAccountEntry(account) != null;
+   }
+
+   record AccountEntry(String accountId, String comment) {
+   }
+}
