--- a/finalforeach/cosmicreach/entities/Entity.java
+++ b/finalforeach/cosmicreach/entities/Entity.java
@@ -43,6 +_,10 @@
    private static final BlockPosition tmpBlockPos1 = new BlockPosition(null, 0, 0, 0);
    private static final BlockPosition tmpBlockPos2 = new BlockPosition(null, 0, 0, 0);
    private static EntityPositionPacket positionPacket = new EntityPositionPacket();
+   // VoidCR start - Extra Fields
+   public int maxInvulnerabilityFrames = 5;
+   public int invulnerabilityFrames = 5;
+   // VoidCR end - Extra Fields
    @CRBSerialized
    public EntityUniqueId uniqueId = EntityUniqueId.getNew();
    @CRBSerialized
@@ -160,11 +_,16 @@
    }
 
    public boolean recentlyHit() {
-      return this.zone.currentZoneTick - this.lastHitTick < 5L;
+      return this.zone.currentZoneTick - this.lastHitTick < invulnerabilityFrames; // VoidCR allow invulnerability frames
    }
 
    public void hit(IDamageSource damageSource, float amount) {
       if (amount != 0.0F) {
+         // VoidCR start - call VoidPreEntityDamageEvent
+         final var event = sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.preEntityDamage(amount, maxInvulnerabilityFrames, (Entity) damageSource, this);
+         if (event != null && event.isCanceled()) return;
+         amount = event == null ? amount : event.getDamage();
+         // VoidCR end - call VoidPreEntityDamageEvent
          if (ServerSingletons.SERVER != null) {
             ServerSingletons.SERVER.broadcast(this.zone, new HitEntityPacket(this, amount));
          }
@@ -172,9 +_,13 @@
          if (amount < 0.0F) {
             this.hitpoints = Math.min(this.hitpoints - amount, this.maxHitpoints);
          } else if (this.getPendingDamage() == 0.0F && !this.recentlyHit()) {
+            // VoidCR start - PreEntityDamageEvent
             this.setPendingDamage(Math.max(this.getPendingDamage(), amount));
             this.lastHitTick = this.zone.currentZoneTick;
+            this.invulnerabilityFrames = event == null ? maxInvulnerabilityFrames : event.getInvulnerabilityFrames(); // apply max invulnerability frames
+            // VoidCR end - PreEntityDamageEvent
          }
+         sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.postEntityDamage(this.pendingDamage, this.invulnerabilityFrames, (Entity) damageSource, this); // VoidCR - PostEntityDamageEvent
       }
    }
 
