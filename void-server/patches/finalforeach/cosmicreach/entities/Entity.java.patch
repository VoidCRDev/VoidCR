--- a/finalforeach/cosmicreach/entities/Entity.java
+++ b/finalforeach/cosmicreach/entities/Entity.java
@@ -54,6 +_,10 @@
    private static final BlockPosition tmpBlockPos1 = new BlockPosition(null, 0, 0, 0);
    private static final BlockPosition tmpBlockPos2 = new BlockPosition(null, 0, 0, 0);
    private static EntityPositionPacket positionPacket = new EntityPositionPacket();
+   // VoidCR start - Extra Fields
+   public int maxInvulnerabilityFrames = 5;
+   public int invulnerabilityFrames = 5;
+   // VoidCR end - Extra Fields
    @CRBSerialized
    public EntityUniqueId uniqueId = EntityUniqueId.getNew();
    @CRBSerialized
@@ -181,11 +_,21 @@
    }
 
    public boolean recentlyHit() {
-      return this.zone.currentZoneTick - this.lastHitTick < 5L;
+      return this.zone.currentZoneTick - this.lastHitTick < invulnerabilityFrames; // VoidCR allow invulnerability frames
    }
 
    public void hit(IDamageSource damageSource, float amount) {
-      if (amount != 0.0F) {
+       // VoidCR - creative instant kill start
+       if (sh.miles.voidcr.impl.server.VoidServer.SERVER.getConfiguration().behaviorChanges().creativeInstantKill() && damageSource instanceof finalforeach.cosmicreach.entities.player.PlayerEntity entity && entity.getPlayer().gamemode == finalforeach.cosmicreach.entities.player.Gamemode.CREATIVE) {
+           amount = entity.maxHitpoints;
+       }
+       // VoidCR - creative instant kill end
+       if (amount != 0.0F) {
+         // VoidCR start - call VoidPreEntityDamageEvent
+         final var event = sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.preEntityDamage(amount, maxInvulnerabilityFrames, damageSource, this);
+         if (event != null && event.isCanceled()) return;
+         amount = event == null ? amount : event.getDamage();
+         // VoidCR end - call VoidPreEntityDamageEvent
          if (ServerSingletons.SERVER != null && damageSource instanceof Entity entityDamageSource) {
             ServerSingletons.SERVER.broadcast(this.zone, new HitEntityPacket(this, entityDamageSource, amount));
          }
@@ -193,9 +_,13 @@
          if (amount < 0.0F) {
             this.hitpoints = Math.min(this.hitpoints - amount, this.maxHitpoints);
          } else if (this.getPendingDamage() == 0.0F && !this.recentlyHit()) {
+            // VoidCR start - PreEntityDamageEvent
             this.setPendingDamage(Math.max(this.getPendingDamage(), amount));
             this.lastHitTick = this.zone.currentZoneTick;
+            this.invulnerabilityFrames = event == null ? maxInvulnerabilityFrames : event.getInvulnerabilityFrames(); // apply max invulnerability frames
+            // VoidCR end - PreEntityDamageEvent
          }
+         sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.postEntityDamage(this.pendingDamage, this.invulnerabilityFrames, damageSource, this); // VoidCR - PostEntityDamageEvent
       }
    }
 
@@ -536,6 +_,10 @@
    }
 
    public void updateConstraints(Zone zone, Vector3 targetPosition) {
+       // VoidCR - EntityMoveEvent
+       final var out = sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.preEntityMove(this, this.lastPosition, targetPosition, this.isOnGround);
+       if (out != null) this.targetPosition.set(sh.miles.voidcr.impl.world.position.VoidPosition.toVector3(out.getTo()));
+       // VoidCR - EntityMoveEvent end
       float floorFriction = 0.0F;
       this.tmpEntityBoundingBox.set(this.localBoundingBox);
       this.tmpEntityBoundingBox.min.add(this.position);
@@ -962,6 +_,7 @@
       }
 
       EntityUtils.updateEntityChunk(zone, this);
+      sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.postEntityMove(this); // VoidCR - PostEntityMoveEvent
       this.sendPositionPacket();
    }
 
