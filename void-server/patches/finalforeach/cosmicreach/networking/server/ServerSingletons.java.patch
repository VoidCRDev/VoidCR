--- a/finalforeach/cosmicreach/networking/server/ServerSingletons.java
+++ b/finalforeach/cosmicreach/networking/server/ServerSingletons.java
@@ -41,6 +_,7 @@
 import java.util.function.Consumer;
 
 public class ServerSingletons {
+   public static java.util.concurrent.atomic.AtomicBoolean running = new java.util.concurrent.atomic.AtomicBoolean(true); // VoidCR - allow control of server termination
    public static NettyServer SERVER;
    private static ObjectMap<NetworkIdentity, Account> netIdsToAccounts = new ObjectMap();
    private static ObjectMap<Account, NetworkIdentity> accountsToNetIds = new ObjectMap();
@@ -108,6 +_,7 @@
       Zone zone = player.getZone();
       zone.addPlayer(player);
       world.players.add(player);
+      world.nameToPlayer.put(player.getUsername(), player); // VoidCR nameToPlayerMap
       ArrayIterator var5 = world.players.iterator();
 
       while (var5.hasNext()) {
@@ -163,30 +_,38 @@
          world.currentWorldTick++;
          if (SERVER != null) {
             SERVER.broadcastToAll(new EndTickPacket(world.currentWorldTick));
+            sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.preUniverseEndTick(world, world.currentWorldTick); // VoidCR call pre tick end
          }
       });
       registerBlockEntityOpeners();
       GameSingletons.postCreate();
+      sh.miles.voidcr.impl.server.VoidServer.SERVER.load(); // VoidCR - initialize server
    }
 
    private static void registerBlockEntityOpeners() {
       GameSingletons.registerBlockEntityScreenOpener("base:container", info -> {
+         if(!sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.prePlayerOpenBlockScreen(info)) return; // VoidCR call PrePlayerOpenBlockScreen
          ServerIdentity id = getConnection(info.player());
          BlockEntity blockEntity = info.blockEntity();
          id.send(new BlockEntityDataPacket(blockEntity));
          id.send(new BlockEntityScreenPacket((IBlockEntityWithContainer)blockEntity));
+         sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.postPlayerOpenBlockScreen(info); // VoidCR call PostPlayerOpenBlockScreen
       });
       GameSingletons.registerBlockEntityScreenOpener("base:furnace", info -> {
+         if(!sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.prePlayerOpenBlockScreen(info)) return; // VoidCR call PrePlayerOpenBlockScreen
          ServerIdentity id = getConnection(info.player());
          BlockEntity blockEntity = info.blockEntity();
          id.send(new BlockEntityDataPacket(blockEntity));
          id.send(new BlockEntityScreenPacket((IBlockEntityWithContainer)blockEntity));
+         sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.postPlayerOpenBlockScreen(info); // VoidCR call PostPlayerOpenBlockScreen
       });
       GameSingletons.registerBlockEntityScreenOpener("base:sign_entity", info -> {
+         if(!sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.prePlayerOpenBlockScreen(info)) return; // VoidCR call PrePlayerOpenBlockScreen
          ServerIdentity id = getConnection(info.player());
          BlockEntity blockEntity = info.blockEntity();
          id.send(new BlockEntityDataPacket(blockEntity));
          id.send(new BlockEntityScreenPacket(blockEntity));
+         sh.miles.voidcr.impl.plugin.lifecycle.event.VoidEventFactory.postPlayerOpenBlockScreen(info); // VoidCR call PostPlayerOpenBlockScreen
       });
       Consumer<BlockEntityScreenInfo> customUiConsumer = info -> {
          ServerIdentity id = getConnection(info.player());
